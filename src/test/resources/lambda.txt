public class Java8Test{
	
	/* 
	* Tests for Java8. 
	* These are lambda and method reference expressions semantically incorrect, 
	* but parseable (like 1 = 1;) extracted from the jsr335-final.  
	*/
	public static void main(String[] args) throws Exception{

		optimizedInstructions.forEach(instr -> instr.accept(this));
				
		Object o = s -> String::length;		
		
		() -> {};                   // No parameters; result is void

		
		() -> 42;                     // No parameters, expression body
		() -> null;                   // No parameters, expression body
		() -> { return 42; };         // No parameters, block body with return
		() -> { System.gc(); };       // No parameters, void block body

		() -> {
		  if (true) return 12;
		  else {
		    int result = 15;
		    for (int i = 1; i < 10; i++)
		      result *= i;
		    return result;
		  }
		}   ;                       // Complex block body with returns

		(int x) -> x+1 ;            // Single declared-type parameter
		
		(int x) -> { return x+1; }; // Single declared-type parameter
		(x) -> x+1;                 // Single inferred-type parameter
		x -> x+1;                   // Parens optional for single inferred-type case

		(String s) -> s.length();   // Single declared-type parameter
		(Thread t) -> { t.start(); }; // Single declared-type parameter
		s -> s.length();              // Single inferred-type parameter
		t -> { t.start(); };          // Single inferred-type parameter

		(int x, int y) -> x+y;      // Multiple declared-type parameters
		(x,y) -> x+y;               // Multiple inferred-type parameters
		(final int x) -> x+1;       // Modified declared-type parameter
		
		()-> System::getProperty;
		()-> String::length;
		()-> List<String>::size;  // explicit class type args
		()-> List::size;           // inferred class type args
		()-> int[]::clone;
		()-> T::tvarMember;

		()-> "abc"::length;
		()-> System.out::println;
		()-> foo[x]::bar;
		()-> (test ? stream.map(String::trim) : stream)::toArray;
		()-> super::toString;

		()-> String::valueOf;      // overload resolution needed     
		()-> Arrays::sort;         // type args inferred from context
		
		()-> Arrays::<String>sort; // explicit type args

		()-> ArrayList<String>::new;    // constructor for parameterized type
		()-> ArrayList::new;            // inferred class type args
		()-> Foo::<Integer>new;         // explicit generic constructor type arguments
		()-> Bar<String>::<Integer>new; // generic class, generic constructor
		()-> Outer.Inner::new;          // inner class constructor
		()-> int[]::new;                // array creation*/
		Stream<CharSequence> stream = generate((Supplier<CharSequence>) () -> "Fail");
		c = (Supplier<CharSequence>) () -> "Fail";
	}
	
	public interface B{
		
		void accept();
		//new default modifier in Java 8 just for interfaces
		public default void listen(){}
	}
}